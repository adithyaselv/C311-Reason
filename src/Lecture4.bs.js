// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");

function freeuhenv(sym, _exp, _env) {
  while(true) {
    var env = _env;
    var exp = _exp;
    switch (exp.TAG | 0) {
      case /* Var */0 :
          var s = exp._0;
          if (s === sym) {
            return !List.mem(s, env);
          } else {
            return false;
          }
      case /* Lambda */1 :
          _env = List.append({
                hd: exp._0,
                tl: /* [] */0
              }, env);
          _exp = exp._1;
          continue ;
      case /* App */2 :
          if (!freeuhenv(sym, exp._0, env)) {
            return false;
          }
          _exp = exp._1;
          continue ;
      
    }
  };
}

function freeuh(sym, _exp) {
  while(true) {
    var exp = _exp;
    switch (exp.TAG | 0) {
      case /* Var */0 :
          return exp._0 === sym;
      case /* Lambda */1 :
          if (exp._0 === sym) {
            return false;
          }
          _exp = exp._1;
          continue ;
      case /* App */2 :
          if (!freeuh(sym, exp._0)) {
            return false;
          }
          _exp = exp._1;
          continue ;
      
    }
  };
}

function bound(sym, _exp) {
  while(true) {
    var exp = _exp;
    switch (exp.TAG | 0) {
      case /* Var */0 :
          return exp._0 !== sym;
      case /* Lambda */1 :
          if (exp._0 === sym) {
            return !bound(sym, exp._1);
          } else {
            return false;
          }
      case /* App */2 :
          if (bound(sym, exp._0)) {
            return true;
          }
          _exp = exp._1;
          continue ;
      
    }
  };
}

function boundenv(sym, _exp, _env) {
  while(true) {
    var env = _env;
    var exp = _exp;
    switch (exp.TAG | 0) {
      case /* Var */0 :
          var s = exp._0;
          if (s === sym) {
            return List.mem(s, env);
          } else {
            return false;
          }
      case /* Lambda */1 :
          _env = List.append({
                hd: exp._0,
                tl: /* [] */0
              }, env);
          _exp = exp._1;
          continue ;
      case /* App */2 :
          if (boundenv(sym, exp._0, env)) {
            return true;
          }
          _exp = exp._1;
          continue ;
      
    }
  };
}

console.log(freeuh("x", {
          TAG: /* Lambda */1,
          _0: "y",
          _1: {
            TAG: /* App */2,
            _0: {
              TAG: /* Var */0,
              _0: "x"
            },
            _1: {
              TAG: /* Var */0,
              _0: "x"
            }
          }
        }));

console.log(freeuhenv("x", {
          TAG: /* Lambda */1,
          _0: "y",
          _1: {
            TAG: /* App */2,
            _0: {
              TAG: /* Var */0,
              _0: "x"
            },
            _1: {
              TAG: /* Var */0,
              _0: "x"
            }
          }
        }, /* [] */0));

console.log(freeuh("y", {
          TAG: /* Lambda */1,
          _0: "y",
          _1: {
            TAG: /* App */2,
            _0: {
              TAG: /* Var */0,
              _0: "x"
            },
            _1: {
              TAG: /* Var */0,
              _0: "x"
            }
          }
        }));

console.log(freeuh("y", {
          TAG: /* Lambda */1,
          _0: "y",
          _1: {
            TAG: /* App */2,
            _0: {
              TAG: /* Var */0,
              _0: "y"
            },
            _1: {
              TAG: /* Var */0,
              _0: "x"
            }
          }
        }));

console.log(bound("x", {
          TAG: /* Lambda */1,
          _0: "y",
          _1: {
            TAG: /* App */2,
            _0: {
              TAG: /* Var */0,
              _0: "x"
            },
            _1: {
              TAG: /* Var */0,
              _0: "x"
            }
          }
        }));

console.log(bound("x", {
          TAG: /* Lambda */1,
          _0: "x",
          _1: {
            TAG: /* App */2,
            _0: {
              TAG: /* Var */0,
              _0: "x"
            },
            _1: {
              TAG: /* Var */0,
              _0: "x"
            }
          }
        }));

console.log(boundenv("x", {
          TAG: /* Lambda */1,
          _0: "y",
          _1: {
            TAG: /* App */2,
            _0: {
              TAG: /* Var */0,
              _0: "x"
            },
            _1: {
              TAG: /* Var */0,
              _0: "x"
            }
          }
        }, /* [] */0));

console.log(boundenv("x", {
          TAG: /* Lambda */1,
          _0: "x",
          _1: {
            TAG: /* App */2,
            _0: {
              TAG: /* Var */0,
              _0: "x"
            },
            _1: {
              TAG: /* Var */0,
              _0: "x"
            }
          }
        }, /* [] */0));

exports.freeuhenv = freeuhenv;
exports.freeuh = freeuh;
exports.bound = bound;
exports.boundenv = boundenv;
/*  Not a pure module */
